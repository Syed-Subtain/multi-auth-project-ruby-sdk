# multi_auth_sample
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module MultiAuthSample
  # An enum for SDK environments.
  class Environment
    ENVIRONMENT = [
      PRODUCTION = 'production'.freeze,
      TESTING = 'testing'.freeze
    ].freeze
  end

  # An enum for API servers.
  class Server
    SERVER = [
      DEFAULT = 'default'.freeze,
      AUTH = 'auth'.freeze
    ].freeze
  end

  # All configuration including auth info and base URI for the API access
  # are configured in this class.
  class Configuration < CoreLibrary::HttpClientConfiguration
    # The attribute readers for properties.
    attr_reader :environment, :port, :suites, :basic_auth_credentials, :api_key_credentials,
                :api_header_credentials, :o_auth_ccg_credentials, :o_auth_acg_credentials,
                :o_auth_ropcg_credentials, :o_auth_bearer_token_credentials,
                :custom_auth_credentials, :access_token

    class << self
      attr_reader :environments
    end

    def initialize(
      connection: nil, adapter: :net_http_persistent, timeout: 60,
      max_retries: 0, retry_interval: 1, backoff_factor: 2,
      retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
      retry_methods: %i[get put], http_callback: nil,
      environment: Environment::TESTING, port: '80',
      suites: SuiteCodeEnum::HEARTS, basic_auth_credentials: nil,
      api_key_credentials: nil, api_header_credentials: nil,
      o_auth_ccg_credentials: nil, o_auth_acg_credentials: nil,
      o_auth_ropcg_credentials: nil, o_auth_bearer_token_credentials: nil,
      custom_auth_credentials: nil, access_token: ''
    )

      super connection: connection, adapter: adapter, timeout: timeout,
            max_retries: max_retries, retry_interval: retry_interval,
            backoff_factor: backoff_factor, retry_statuses: retry_statuses,
            retry_methods: retry_methods, http_callback: http_callback

      # Current API environment
      @environment = String(environment)

      # port value
      @port = port

      # suites value
      @suites = suites

      # The object holding Basic Authentication credentials
      @basic_auth_credentials = basic_auth_credentials

      # The object holding Custom Query Parameter credentials
      @api_key_credentials = api_key_credentials

      # The object holding Custom Header Signature credentials
      @api_header_credentials = api_header_credentials

      # The object holding OAuth 2 Client Credentials Grant credentials
      @o_auth_ccg_credentials = o_auth_ccg_credentials

      # The object holding OAuth 2 Authorization Code Grant credentials
      @o_auth_acg_credentials = o_auth_acg_credentials

      # The object holding OAuth 2 Resource Owner Credentials Grant credentials
      @o_auth_ropcg_credentials = o_auth_ropcg_credentials

      # The object holding OAuth 2 Bearer token credentials
      @o_auth_bearer_token_credentials = o_auth_bearer_token_credentials

      # The object holding Custom Authentication credentials
      @custom_auth_credentials = custom_auth_credentials

      # TODO: Replace
      @access_token = access_token

      # The Http Client to use for making requests.
      set_http_client CoreLibrary::FaradayClient.new(self)
    end

    def clone_with(connection: nil, adapter: nil, timeout: nil,
                   max_retries: nil, retry_interval: nil, backoff_factor: nil,
                   retry_statuses: nil, retry_methods: nil, http_callback: nil,
                   environment: nil, port: nil, suites: nil,
                   basic_auth_credentials: nil, api_key_credentials: nil,
                   api_header_credentials: nil, o_auth_ccg_credentials: nil,
                   o_auth_acg_credentials: nil, o_auth_ropcg_credentials: nil,
                   o_auth_bearer_token_credentials: nil,
                   custom_auth_credentials: nil, access_token: nil)
      connection ||= self.connection
      adapter ||= self.adapter
      timeout ||= self.timeout
      max_retries ||= self.max_retries
      retry_interval ||= self.retry_interval
      backoff_factor ||= self.backoff_factor
      retry_statuses ||= self.retry_statuses
      retry_methods ||= self.retry_methods
      http_callback ||= self.http_callback
      environment ||= self.environment
      port ||= self.port
      suites ||= self.suites
      basic_auth_credentials ||= self.basic_auth_credentials
      api_key_credentials ||= self.api_key_credentials
      api_header_credentials ||= self.api_header_credentials
      o_auth_ccg_credentials ||= self.o_auth_ccg_credentials
      o_auth_acg_credentials ||= self.o_auth_acg_credentials
      o_auth_ropcg_credentials ||= self.o_auth_ropcg_credentials
      o_auth_bearer_token_credentials ||= self.o_auth_bearer_token_credentials
      custom_auth_credentials ||= self.custom_auth_credentials
      access_token ||= self.access_token

      Configuration.new(
        connection: connection, adapter: adapter, timeout: timeout,
        max_retries: max_retries, retry_interval: retry_interval,
        backoff_factor: backoff_factor, retry_statuses: retry_statuses,
        retry_methods: retry_methods, http_callback: http_callback,
        environment: environment, port: port, suites: suites,
        basic_auth_credentials: basic_auth_credentials,
        api_key_credentials: api_key_credentials,
        api_header_credentials: api_header_credentials,
        o_auth_ccg_credentials: o_auth_ccg_credentials,
        o_auth_acg_credentials: o_auth_acg_credentials,
        o_auth_ropcg_credentials: o_auth_ropcg_credentials,
        o_auth_bearer_token_credentials: o_auth_bearer_token_credentials,
        custom_auth_credentials: custom_auth_credentials,
        access_token: access_token
      )
    end


    # All the environments the SDK can run in.
    ENVIRONMENTS = {
      Environment::PRODUCTION => {
        Server::DEFAULT => 'http://apimatic.hopto.org:{suites}',
        Server::AUTH => 'http://apimaticauth.hopto.org:3000'
      },
      Environment::TESTING => {
        Server::DEFAULT => 'http://localhost:3000',
        Server::AUTH => 'http://localhost:3000/oauth2/auth-server'
      }
    }.freeze

    # Generates the appropriate base URI for the environment and the server.
    # @param [Configuration::Server] server The server enum for which the base URI is
    # required.
    # @return [String] The base URI.
    def get_base_uri(server = Server::DEFAULT)
      parameters = {
        'port' => { 'value' => port, 'encode' => false },
        'suites' => { 'value' => suites, 'encode' => false }
      }
      APIHelper.append_url_with_template_parameters(
        ENVIRONMENTS[environment][server], parameters
      )
    end
  end
end
